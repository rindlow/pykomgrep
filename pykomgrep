#!/usr/bin/env python3
# -*- mode: python -*-

import argparse
import collections
import os.path
import re
import time
import signal
import sqlite3
import sys

import kom
import komconnect


def parsetime(string):
    try:
        return time.mktime(time.strptime(string, '%Y-%m-%d'))
    except ValueError:
        raise argparse.ArgumentTypeError(f'{string:r} not in format %Y-%m-%d')


TextStat = collections.namedtuple('TextStat', ['creation_time', 'encoding'])


class ArgumentError(Exception):
    pass


class EmptyListError(Exception):
    pass


class Cache:
    dbfile = 'pykomgrep.cache'

    def __init__(self):
        create = False
        if not os.path.exists(self.dbfile):
            create = True
        self.conn = sqlite3.connect(self.dbfile)
        if create:
            cursor = self.conn.cursor()
            cursor.execute('''
               CREATE TABLE textstat_cache (
                 textno        INTEGER,
                 creation_time INTEGER,
                 encoding      TEXT
               )''')
            cursor.execute('''
               CREATE TABLE text_cache (
                 textno        INTEGER,
                 content       TEXT
               )''')
            cursor.execute('''
               CREATE TABLE local_to_global_cache (
                 confno INTEGER,
                 local  INTEGER,
                 global INTEGER
               )''')
            cursor.execute('''
               CREATE TABLE created_texts_cache (
                 persno INTEGER,
                 local  INTEGER,
                 global INTEGER
               )''')
            self.conn.commit()

    def commit(self):
        self.conn.commit()

    def textstat(self, textno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT creation_time, encoding
              FROM textstat_cache
             WHERE textno = ?''', (textno,))
        if res := cursor.fetchone():
            return TextStat(*res)
        return None

    def add_textstat(self, textno, textstat):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO textstat_cache
                 VALUES (?, ?, ?)''',
                       (textno, textstat.creation_time, textstat.encoding))

    def content(self, textno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT content
              FROM text_cache
             WHERE textno = ?''', (textno,))
        if res := cursor.fetchone():
            return res[0]
        return None

    def add_content(self, textno, content):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO text_cache
                 VALUES (?, ?)''', (textno, content))

    def last_local(self, confno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT max(local)
              FROM local_to_global_cache
             WHERE confno = ?''', (confno,))
        if res := cursor.fetchone():
            return res[0]
        return None

    def global_text_list(self, confno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT global
              FROM local_to_global_cache
             WHERE confno = ?
          ORDER BY global''', (confno,))
        res = cursor.fetchall()
        if res:
            return [row[0] for row in res]
        return []

    def add_local_to_global(self, confno, ltg):
        cursor = self.conn.cursor()
        cursor.executemany('''
            INSERT INTO local_to_global_cache
                 VALUES (?, ?, ?)''', ((confno, e[0], e[1]) for e in ltg))

    def last_created(self, persno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT max(local)
              FROM created_texts_cache
             WHERE persno = ?''', (persno,))
        if res := cursor.fetchone():
            return res[0]
        return None

    def created_text_list(self, persno):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT global
              FROM created_texts_cache
             WHERE persno = ?
          ORDER BY global''', (persno,))
        res = cursor.fetchall()
        if res:
            return [row[0] for row in res]
        return []

    def add_created_texts(self, persno, mct):
        cursor = self.conn.cursor()
        cursor.executemany('''
            INSERT INTO created_texts_cache
                 VALUES (?, ?, ?)''', ((persno, e[0], e[1]) for e in mct))


class Textlist:

    def __init__(self, conn):
        self._reverse = False
        self.textset = set()
        self.conn = conn
        self.cache = Cache()
        signal.signal(signal.SIGINT, self.graceful)

    def graceful(self, signal_received, frame):
        self.cache.commit()
        print('Exiting on command')
        sys.exit(0)

    def is_empty(self):
        return len(self.textset) == 0

    def check_if_empty(self):
        if self.is_empty():
            raise EmptyListError

    def reverse(self):
        self._reverse = not self._reverse

    def get_textnos_in_conf(self, conf_no):
        if (start := self.cache.last_local(conf_no)) is None:
            conf = kom.ReqGetConfStat(self.conn, conf_no).response()
            start = conf.first_local_no
        texts = set(self.cache.global_text_list(conf_no))
        while (ltg := kom.ReqLocalToGlobal(self.conn,
                                           conf_no,
                                           start,
                                           255).response()).later_texts_exists:
            texts.update(set(ltg.dict.values()))
            self.cache.add_local_to_global(conf_no, ltg.list)
            start = ltg.range_end
        texts.discard(0)

        if self.is_empty():
            self.textset = texts
        else:
            self.textset.intersection_update(texts)

    def get_textnos_by_author(self, pers_no):
        if (start := self.cache.last_created(pers_no)) is None:
            pers = kom.ReqGetPersonStat(self.conn, pers_no).response()
            start = pers.first_created_local_no
        texts = set(self.cache.created_text_list(pers_no))
        while (mct := kom.ReqMapCreatedTexts(
                self.conn,
                pers_no,
                start,
                255).response()).later_texts_exists:
            texts.update(set(mct.dict.values()))
            self.cache.add_created_texts(pers_no, mct.list)
            start = mct.range_end
        texts.discard(0)

        if self.is_empty():
            self.textset = texts
        else:
            self.textset.intersection_update(texts)

    def get_all_marks(self):
        marks = kom.ReqGetMarks(self.conn).response()
        texts = set(m.text_no for m in marks)
        texts.discard(0)

        if self.is_empty():
            self.textset = texts
        else:
            self.textset.intersection_update(texts)

    def get_textstat(self, text_no):
        if textstat := self.cache.textstat(text_no):
            return textstat

        stat = kom.ReqGetTextStat(self.conn, text_no).response()
        encoding = 'latin1'
        for aux_item in stat.aux_items:
            if aux_item.tag == 1:  # content
                for param in aux_item.data.decode('latin1').split(';')[1:]:
                    attr, value = param.strip().split('=')
                    if attr == 'charset' and value not in ('us-ascii',
                                                           'x-ctext'):
                        encoding = value
        textstat = TextStat(stat.creation_time.to_python_time(), encoding)
        self.cache.add_textstat(text_no, textstat)
        return textstat

    def get_text(self, text_no):
        if text := self.cache.content(text_no):
            return text

        try:
            text = kom.ReqGetText(self.conn, text_no).response()
        except kom.NoSuchText:
            self.cache.add_content(text_no, None)
            return None

        text = text.decode(self.get_textstat(text_no).encoding)
        self.cache.add_content(text_no, text)
        return text

    def texts_since(self, timestamp):
        texts = sorted(self.textset)
        if self.get_textstat(texts[0]).creation_time >= timestamp:
            return
        if self.get_textstat(texts[-1]).creation_time < timestamp:
            self.textset.clear()
            return

        left = 0
        right = len(texts) - 1
        while left < right:
            i = left + (right - left) // 2
            if self.get_textstat(texts[i]).creation_time >= timestamp:
                right = i
            else:
                left = i + 1
        self.textset = set(texts[left:])

    def texts_before(self, timestamp):
        texts = sorted(self.textset)
        if self.get_textstat(texts[0]).creation_time >= timestamp:
            self.textset.clear()
            return
        if self.get_textstat(texts[-1]).creation_time < timestamp:
            return

        left = 0
        right = len(texts) - 1
        while left < right:
            i = left + (right - left) / 2
            if self.get_textstat(texts[i]).creation_time >= timestamp:
                right = i
            else:
                left = i + 1
        self.textset = set(texts[:left])

    def grep(self, pattern, include_subject, ignore_case):
        flags = 0
        if ignore_case:
            flags = re.I
        for text_no in sorted(self.textset, reverse=self._reverse):
            text = self.get_text(text_no)
            if not include_subject:
                try:
                    text = text[text.find('\n'):]
                except ValueError:
                    pass
            matches = re.findall(f'.*{pattern}.*', text, flags)
            for match in matches:
                print(f'{text_no: >10} {match}')
        self.cache.commit()


class Pykomgrep:

    def __init__(self):
        self.parse_cmdline()
        self.conn = komconnect.connect_and_login(self.args)

        self.textlist = Textlist(self.conn)
        self.populate_textlist()

        self.textlist.grep(self.args.pattern, self.args.include_subject,
                           self.args.ignore_case)

        kom.ReqLogout(self.conn)

    def parse_cmdline(self):
        parser = argparse.ArgumentParser(description='Grep in LysKOM texts')
        parser.add_argument('--conf', '-c', action='store',
                            help='search only texts in conference CONF')
        parser.add_argument('--author', '-a', action='store',
                            help='search only texts by author AUTHOR')
        parser.add_argument('--marked', '-m', action='store_true',
                            help='search only marked texts')
        parser.add_argument('--since', '-s', action='store', metavar='DATE',
                            type=parsetime,
                            help='search only texts written since DATE')
        parser.add_argument('--before', '-b', action='store', metavar='DATE',
                            type=parsetime,
                            help='search only texts written before DATE')
        parser.add_argument('--oldest-first', '-o', action='store_true',
                            help='start with the oldest text found')
        parser.add_argument('--ignore-case', '-i', action='store_true',
                            help='ignore the case of the search string')
        parser.add_argument('--include_subject', '-S', action='store_true',
                            help='include the subject line in the search')
        parser.add_argument('pattern', help='to search for')
        komconnect.add_server_name_password(parser)
        self.args = parser.parse_args()

    def get_conf_no(self, name, want_confs):
        matches = self.conn.lookup_name(name, 1, int(want_confs))
        if len(matches) == 0:
            raise ArgumentError(f'{name} - recipient not found')
        if len(matches) != 1:
            raise ArgumentError(f'{name} - ambiguous recipient')
        return matches[0][0]

    def populate_textlist(self):
        if self.args.conf:
            self.textlist.get_textnos_in_conf(
                self.get_conf_no(self.args.conf, True))
        if self.args.author:
            self.textlist.get_textnos_by_author(
                self.get_conf_no(self.args.author, False))
        if self.args.marked:
            self.textlist.get_all_marks()
        self.textlist.check_if_empty()

        if self.args.since:
            self.textlist.texts_since(self.args.since)
        if self.args.before:
            self.textlist.texts_before(self.args.before)
        self.textlist.check_if_empty()

        if not self.args.oldest_first:
            self.textlist.reverse()


# MAIN
Pykomgrep()
